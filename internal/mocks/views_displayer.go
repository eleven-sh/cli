// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eleven-sh/cli/internal/views (interfaces: Displayer)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDisplayer is a mock of Displayer interface.
type MockDisplayer struct {
	ctrl     *gomock.Controller
	recorder *MockDisplayerMockRecorder
}

// MockDisplayerMockRecorder is the mock recorder for MockDisplayer.
type MockDisplayerMockRecorder struct {
	mock *MockDisplayer
}

// NewMockDisplayer creates a new mock instance.
func NewMockDisplayer(ctrl *gomock.Controller) *MockDisplayer {
	mock := &MockDisplayer{ctrl: ctrl}
	mock.recorder = &MockDisplayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisplayer) EXPECT() *MockDisplayerMockRecorder {
	return m.recorder
}

// Display mocks base method.
func (m *MockDisplayer) Display(arg0 io.Writer, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Display", varargs...)
}

// Display indicates an expected call of Display.
func (mr *MockDisplayerMockRecorder) Display(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Display", reflect.TypeOf((*MockDisplayer)(nil).Display), varargs...)
}
