// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependencies

import (
	"github.com/eleven-sh/aws-cloud-provider/config"
	"github.com/eleven-sh/aws-cloud-provider/service"
	"github.com/eleven-sh/aws-cloud-provider/userconfig"
	"github.com/eleven-sh/cli/internal/agent"
	"github.com/eleven-sh/cli/internal/cloudproviders/aws"
	"github.com/eleven-sh/cli/internal/cloudproviders/hetzner"
	config2 "github.com/eleven-sh/cli/internal/config"
	"github.com/eleven-sh/cli/internal/entities"
	features2 "github.com/eleven-sh/cli/internal/features"
	"github.com/eleven-sh/cli/internal/hooks"
	"github.com/eleven-sh/cli/internal/interfaces"
	"github.com/eleven-sh/cli/internal/presenters"
	"github.com/eleven-sh/cli/internal/ssh"
	"github.com/eleven-sh/cli/internal/stepper"
	"github.com/eleven-sh/cli/internal/system"
	"github.com/eleven-sh/cli/internal/views"
	"github.com/eleven-sh/cli/internal/vscode"
	"github.com/eleven-sh/eleven/features"
	"github.com/eleven-sh/eleven/github"
	stepper2 "github.com/eleven-sh/eleven/stepper"
	config3 "github.com/eleven-sh/hetzner-cloud-provider/config"
	service2 "github.com/eleven-sh/hetzner-cloud-provider/service"
	userconfig2 "github.com/eleven-sh/hetzner-cloud-provider/userconfig"
	"github.com/google/wire"
)

// Injectors from aws_edit.go:

func provideAWSEditFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.EditFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	editView := views.NewEditView(baseView)
	editPresenter := presenters.NewEditPresenter(awsAWSViewableErrorBuilder, editView)
	process := vscode.NewProcess()
	extensions := vscode.NewExtensions()
	editOutputHandler := features2.NewEditOutputHandler(editPresenter, process, extensions)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	editFeature := features.NewEditFeature(stepperStepper, editOutputHandler, builder)
	return editFeature
}

// Injectors from aws_init.go:

func provideAWSInitFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.InitFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	userConfig := config2.NewUserConfig()
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	initView := views.NewInitView(baseView)
	initPresenter := presenters.NewInitPresenter(awsAWSViewableErrorBuilder, initView)
	defaultClientBuilder := agent.NewDefaultClientBuilder()
	githubService := github.NewService()
	sshConfig := ssh.NewConfigWithDefaultConfigFilePath()
	keys := ssh.NewKeysWithDefaultDir()
	knownHosts := ssh.NewKnownHostsWithDefaultKnownHostsFilePath()
	initOutputHandler := features2.NewInitOutputHandler(userConfig, initPresenter, defaultClientBuilder, githubService, logger, sshConfig, keys, knownHosts)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	initFeature := features.NewInitFeature(stepperStepper, initOutputHandler, builder)
	return initFeature
}

// Injectors from aws_remove.go:

func provideAWSRemoveFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.RemoveFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	removeView := views.NewRemoveView(baseView)
	removePresenter := presenters.NewRemovePresenter(awsAWSViewableErrorBuilder, removeView)
	removeOutputHandler := features2.NewRemoveOutputHandler(removePresenter)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	removeFeature := features.NewRemoveFeature(stepperStepper, removeOutputHandler, builder)
	return removeFeature
}

// Injectors from aws_serve.go:

func provideAWSServeFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.ServeFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	serveView := views.NewServeView(baseView)
	servePresenter := presenters.NewServePresenter(awsAWSViewableErrorBuilder, serveView)
	defaultClientBuilder := agent.NewDefaultClientBuilder()
	serveOutputHandler := features2.NewServeOutputHandler(servePresenter, defaultClientBuilder)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	serveFeature := features.NewServeFeature(stepperStepper, serveOutputHandler, builder)
	return serveFeature
}

// Injectors from aws_uninstall.go:

func provideAWSUninstallFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.UninstallFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	uninstallView := views.NewUninstallView(baseView)
	uninstallPresenter := presenters.NewUninstallPresenter(awsAWSViewableErrorBuilder, uninstallView)
	uninstallOutputHandler := features2.NewUninstallOutputHandler(uninstallPresenter)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	uninstallFeature := features.NewUninstallFeature(stepperStepper, uninstallOutputHandler, builder)
	return uninstallFeature
}

// Injectors from aws_unserve.go:

func provideAWSUnserveFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.UnserveFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	unserveView := views.NewUnserveView(baseView)
	unservePresenter := presenters.NewUnservePresenter(awsAWSViewableErrorBuilder, unserveView)
	defaultClientBuilder := agent.NewDefaultClientBuilder()
	unserveOutputHandler := features2.NewUnserveOutputHandler(unservePresenter, defaultClientBuilder)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	unserveFeature := features.NewUnserveFeature(stepperStepper, unserveOutputHandler, builder)
	return unserveFeature
}

// Injectors from entities.go:

func ProvideEnvRepositoriesResolver() entities.EnvRepositoriesResolver {
	logger := system.NewLogger()
	userConfig := config2.NewUserConfig()
	githubService := github.NewService()
	envRepositoriesResolver := entities.NewEnvRepositoriesResolver(logger, userConfig, githubService)
	return envRepositoriesResolver
}

// Injectors from hetzner_edit.go:

func provideHetznerEditFeature(userConfigEnvVarsResolverOpts userconfig2.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig2.FilesResolverOpts, userConfigLocalResolverOpts hetzner.UserConfigLocalResolverOpts, serviceBuilderOpts service2.BuilderOpts) features.EditFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	hetznerHetznerViewableErrorBuilder := hetzner.NewHetznerViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	editView := views.NewEditView(baseView)
	editPresenter := presenters.NewEditPresenter(hetznerHetznerViewableErrorBuilder, editView)
	process := vscode.NewProcess()
	extensions := vscode.NewExtensions()
	editOutputHandler := features2.NewEditOutputHandler(editPresenter, process, extensions)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig2.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	contextLoader := config3.NewContextLoader()
	filesResolver := userconfig2.NewFilesResolver(contextLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := hetzner.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config3.NewUserConfigValidator()
	builder := service2.NewBuilder(serviceBuilderOpts, userConfigLocalResolver, userConfigValidator)
	editFeature := features.NewEditFeature(stepperStepper, editOutputHandler, builder)
	return editFeature
}

// Injectors from hetzner_init.go:

func provideHetznerInitFeature(userConfigEnvVarsResolverOpts userconfig2.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig2.FilesResolverOpts, userConfigLocalResolverOpts hetzner.UserConfigLocalResolverOpts, serviceBuilderOpts service2.BuilderOpts) features.InitFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	userConfig := config2.NewUserConfig()
	hetznerHetznerViewableErrorBuilder := hetzner.NewHetznerViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	initView := views.NewInitView(baseView)
	initPresenter := presenters.NewInitPresenter(hetznerHetznerViewableErrorBuilder, initView)
	defaultClientBuilder := agent.NewDefaultClientBuilder()
	githubService := github.NewService()
	sshConfig := ssh.NewConfigWithDefaultConfigFilePath()
	keys := ssh.NewKeysWithDefaultDir()
	knownHosts := ssh.NewKnownHostsWithDefaultKnownHostsFilePath()
	initOutputHandler := features2.NewInitOutputHandler(userConfig, initPresenter, defaultClientBuilder, githubService, logger, sshConfig, keys, knownHosts)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig2.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	contextLoader := config3.NewContextLoader()
	filesResolver := userconfig2.NewFilesResolver(contextLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := hetzner.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config3.NewUserConfigValidator()
	builder := service2.NewBuilder(serviceBuilderOpts, userConfigLocalResolver, userConfigValidator)
	initFeature := features.NewInitFeature(stepperStepper, initOutputHandler, builder)
	return initFeature
}

// Injectors from hetzner_remove.go:

func provideHetznerRemoveFeature(userConfigEnvVarsResolverOpts userconfig2.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig2.FilesResolverOpts, userConfigLocalResolverOpts hetzner.UserConfigLocalResolverOpts, serviceBuilderOpts service2.BuilderOpts) features.RemoveFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	hetznerHetznerViewableErrorBuilder := hetzner.NewHetznerViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	removeView := views.NewRemoveView(baseView)
	removePresenter := presenters.NewRemovePresenter(hetznerHetznerViewableErrorBuilder, removeView)
	removeOutputHandler := features2.NewRemoveOutputHandler(removePresenter)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig2.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	contextLoader := config3.NewContextLoader()
	filesResolver := userconfig2.NewFilesResolver(contextLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := hetzner.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config3.NewUserConfigValidator()
	builder := service2.NewBuilder(serviceBuilderOpts, userConfigLocalResolver, userConfigValidator)
	removeFeature := features.NewRemoveFeature(stepperStepper, removeOutputHandler, builder)
	return removeFeature
}

// Injectors from hetzner_serve.go:

func provideHetznerServeFeature(userConfigEnvVarsResolverOpts userconfig2.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig2.FilesResolverOpts, userConfigLocalResolverOpts hetzner.UserConfigLocalResolverOpts, serviceBuilderOpts service2.BuilderOpts) features.ServeFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	hetznerHetznerViewableErrorBuilder := hetzner.NewHetznerViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	serveView := views.NewServeView(baseView)
	servePresenter := presenters.NewServePresenter(hetznerHetznerViewableErrorBuilder, serveView)
	defaultClientBuilder := agent.NewDefaultClientBuilder()
	serveOutputHandler := features2.NewServeOutputHandler(servePresenter, defaultClientBuilder)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig2.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	contextLoader := config3.NewContextLoader()
	filesResolver := userconfig2.NewFilesResolver(contextLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := hetzner.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config3.NewUserConfigValidator()
	builder := service2.NewBuilder(serviceBuilderOpts, userConfigLocalResolver, userConfigValidator)
	serveFeature := features.NewServeFeature(stepperStepper, serveOutputHandler, builder)
	return serveFeature
}

// Injectors from hetzner_uninstall.go:

func provideHetznerUninstallFeature(userConfigEnvVarsResolverOpts userconfig2.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig2.FilesResolverOpts, userConfigLocalResolverOpts hetzner.UserConfigLocalResolverOpts, serviceBuilderOpts service2.BuilderOpts) features.UninstallFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	hetznerHetznerViewableErrorBuilder := hetzner.NewHetznerViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	uninstallView := views.NewUninstallView(baseView)
	uninstallPresenter := presenters.NewUninstallPresenter(hetznerHetznerViewableErrorBuilder, uninstallView)
	uninstallOutputHandler := features2.NewUninstallOutputHandler(uninstallPresenter)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig2.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	contextLoader := config3.NewContextLoader()
	filesResolver := userconfig2.NewFilesResolver(contextLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := hetzner.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config3.NewUserConfigValidator()
	builder := service2.NewBuilder(serviceBuilderOpts, userConfigLocalResolver, userConfigValidator)
	uninstallFeature := features.NewUninstallFeature(stepperStepper, uninstallOutputHandler, builder)
	return uninstallFeature
}

// Injectors from hetzner_unserve.go:

func provideHetznerUnserveFeature(userConfigEnvVarsResolverOpts userconfig2.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig2.FilesResolverOpts, userConfigLocalResolverOpts hetzner.UserConfigLocalResolverOpts, serviceBuilderOpts service2.BuilderOpts) features.UnserveFeature {
	logger := system.NewLogger()
	stepperStepper := stepper.NewStepper(logger)
	hetznerHetznerViewableErrorBuilder := hetzner.NewHetznerViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	unserveView := views.NewUnserveView(baseView)
	unservePresenter := presenters.NewUnservePresenter(hetznerHetznerViewableErrorBuilder, unserveView)
	defaultClientBuilder := agent.NewDefaultClientBuilder()
	unserveOutputHandler := features2.NewUnserveOutputHandler(unservePresenter, defaultClientBuilder)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig2.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	contextLoader := config3.NewContextLoader()
	filesResolver := userconfig2.NewFilesResolver(contextLoader, userConfigFilesResolverOpts, envVars)
	userConfigLocalResolver := hetzner.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config3.NewUserConfigValidator()
	builder := service2.NewBuilder(serviceBuilderOpts, userConfigLocalResolver, userConfigValidator)
	unserveFeature := features.NewUnserveFeature(stepperStepper, unserveOutputHandler, builder)
	return unserveFeature
}

// Injectors from hooks.go:

func ProvidePreRemoveHook() hooks.PreRemove {
	sshConfig := ssh.NewConfigWithDefaultConfigFilePath()
	keys := ssh.NewKeysWithDefaultDir()
	knownHosts := ssh.NewKnownHostsWithDefaultKnownHostsFilePath()
	userConfig := config2.NewUserConfig()
	githubService := github.NewService()
	preRemove := hooks.NewPreRemove(sshConfig, keys, knownHosts, userConfig, githubService)
	return preRemove
}

func ProvideDomainReachabilityChecker() hooks.DomainReachabilityChecker {
	defaultClientBuilder := agent.NewDefaultClientBuilder()
	domainReachabilityChecker := hooks.NewDomainReachabilityChecker(defaultClientBuilder)
	return domainReachabilityChecker
}

// Injectors from login.go:

func ProvideLoginFeature() features2.LoginFeature {
	presentersElevenViewableErrorBuilder := presenters.NewElevenViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	loginView := views.NewLoginView(baseView)
	loginPresenter := presenters.NewLoginPresenter(presentersElevenViewableErrorBuilder, loginView)
	logger := system.NewLogger()
	browser := system.NewBrowser()
	userConfig := config2.NewUserConfig()
	sleeper := system.NewSleeper()
	githubService := github.NewService()
	loginFeature := features2.NewLoginFeature(loginPresenter, logger, browser, userConfig, sleeper, githubService)
	return loginFeature
}

// Injectors from shared.go:

func ProvideBaseView() views.BaseView {
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	return baseView
}

func ProvideElevenViewableErrorBuilder() presenters.ElevenViewableErrorBuilder {
	presentersElevenViewableErrorBuilder := presenters.NewElevenViewableErrorBuilder()
	return presentersElevenViewableErrorBuilder
}

func ProvideSSHConfigManager() ssh.Config {
	sshConfig := ssh.NewConfigWithDefaultConfigFilePath()
	return sshConfig
}

// aws_edit.go:

func ProvideAWSEditFeature(region, profile, credentialsFilePath, configFilePath string) features.EditFeature {
	return provideAWSEditFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// aws_init.go:

func ProvideAWSInitFeature(region, profile, credentialsFilePath, configFilePath string) features.InitFeature {
	return provideAWSInitFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// aws_remove.go:

func ProvideAWSRemoveFeature(region, profile, credentialsFilePath, configFilePath string) features.RemoveFeature {
	return provideAWSRemoveFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// aws_serve.go:

func ProvideAWSServeFeature(region, profile, credentialsFilePath, configFilePath string) features.ServeFeature {
	return provideAWSServeFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// aws_uninstall.go:

func ProvideAWSUninstallFeature(region, profile, credentialsFilePath, configFilePath string) features.UninstallFeature {
	return provideAWSUninstallFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// aws_unserve.go:

func ProvideAWSUnserveFeature(region, profile, credentialsFilePath, configFilePath string) features.UnserveFeature {
	return provideAWSUnserveFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// hetzner_edit.go:

func ProvideHetznerEditFeature(elevenConfigDir, region, context string) features.EditFeature {
	return provideHetznerEditFeature(userconfig2.EnvVarsResolverOpts{
		Region: region,
	}, userconfig2.FilesResolverOpts{
		Region:  region,
		Context: context,
	}, hetzner.UserConfigLocalResolverOpts{
		Context: context,
	}, service2.BuilderOpts{
		ElevenConfigDir: elevenConfigDir,
	},
	)
}

// hetzner_init.go:

func ProvideHetznerInitFeature(elevenConfigDir, region, context string) features.InitFeature {
	return provideHetznerInitFeature(userconfig2.EnvVarsResolverOpts{
		Region: region,
	}, userconfig2.FilesResolverOpts{
		Region:  region,
		Context: context,
	}, hetzner.UserConfigLocalResolverOpts{
		Context: context,
	}, service2.BuilderOpts{
		ElevenConfigDir: elevenConfigDir,
	},
	)
}

// hetzner_remove.go:

func ProvideHetznerRemoveFeature(elevenConfigDir, region, context string) features.RemoveFeature {
	return provideHetznerRemoveFeature(userconfig2.EnvVarsResolverOpts{
		Region: region,
	}, userconfig2.FilesResolverOpts{
		Region:  region,
		Context: context,
	}, hetzner.UserConfigLocalResolverOpts{
		Context: context,
	}, service2.BuilderOpts{
		ElevenConfigDir: elevenConfigDir,
	},
	)
}

// hetzner_serve.go:

func ProvideHetznerServeFeature(elevenConfigDir, region, context string) features.ServeFeature {
	return provideHetznerServeFeature(userconfig2.EnvVarsResolverOpts{
		Region: region,
	}, userconfig2.FilesResolverOpts{
		Region:  region,
		Context: context,
	}, hetzner.UserConfigLocalResolverOpts{
		Context: context,
	}, service2.BuilderOpts{
		ElevenConfigDir: elevenConfigDir,
	},
	)
}

// hetzner_uninstall.go:

func ProvideHetznerUninstallFeature(elevenConfigDir, region, context string) features.UninstallFeature {
	return provideHetznerUninstallFeature(userconfig2.EnvVarsResolverOpts{
		Region: region,
	}, userconfig2.FilesResolverOpts{
		Region:  region,
		Context: context,
	}, hetzner.UserConfigLocalResolverOpts{
		Context: context,
	}, service2.BuilderOpts{
		ElevenConfigDir: elevenConfigDir,
	},
	)
}

// hetzner_unserve.go:

func ProvideHetznerUnserveFeature(elevenConfigDir, region, context string) features.UnserveFeature {
	return provideHetznerUnserveFeature(userconfig2.EnvVarsResolverOpts{
		Region: region,
	}, userconfig2.FilesResolverOpts{
		Region:  region,
		Context: context,
	}, hetzner.UserConfigLocalResolverOpts{
		Context: context,
	}, service2.BuilderOpts{
		ElevenConfigDir: elevenConfigDir,
	},
	)
}

// shared.go:

var viewSet = wire.NewSet(wire.Bind(new(views.Displayer), new(system.Displayer)), system.NewDisplayer, views.NewBaseView)

var elevenViewableErrorBuilder = wire.NewSet(wire.Bind(new(presenters.ViewableErrorBuilder), new(presenters.ElevenViewableErrorBuilder)), presenters.NewElevenViewableErrorBuilder)

var githubManagerSet = wire.NewSet(wire.Bind(new(interfaces.GitHubManager), new(github.Service)), github.NewService)

var userConfigManagerSet = wire.NewSet(wire.Bind(new(interfaces.UserConfigManager), new(config2.UserConfig)), config2.NewUserConfig)

var loggerSet = wire.NewSet(wire.Bind(new(interfaces.Logger), new(system.Logger)), system.NewLogger)

var sshConfigManagerSet = wire.NewSet(wire.Bind(new(interfaces.SSHConfigManager), new(ssh.Config)), ssh.NewConfigWithDefaultConfigFilePath)

var sshKnownHostsManagerSet = wire.NewSet(wire.Bind(new(interfaces.SSHKnownHostsManager), new(ssh.KnownHosts)), ssh.NewKnownHostsWithDefaultKnownHostsFilePath)

var sshKeysManagerSet = wire.NewSet(wire.Bind(new(interfaces.SSHKeysManager), new(ssh.Keys)), ssh.NewKeysWithDefaultDir)

var vscodeProcessManagerSet = wire.NewSet(wire.Bind(new(interfaces.VSCodeProcessManager), new(vscode.Process)), vscode.NewProcess)

var vscodeExtensionsManagerSet = wire.NewSet(wire.Bind(new(interfaces.VSCodeExtensionsManager), new(vscode.Extensions)), vscode.NewExtensions)

var browserManagerSet = wire.NewSet(wire.Bind(new(interfaces.BrowserManager), new(system.Browser)), system.NewBrowser)

var sleeperSet = wire.NewSet(wire.Bind(new(interfaces.Sleeper), new(system.Sleeper)), system.NewSleeper)

var stepperSet = wire.NewSet(wire.Bind(new(stepper2.Stepper), new(stepper.Stepper)), stepper.NewStepper)

var agentSet = wire.NewSet(wire.Bind(new(agent.ClientBuilder), new(agent.DefaultClientBuilder)), agent.NewDefaultClientBuilder)
